using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Text;

//REVISION 126
public class TaskManager : MonoBehaviour
{
   
    public static int TaskCount { get; set; }

   // private static char separator = '/';
	
    private ArrayList tasks = new ArrayList();
    private Dictionary<string, int> words = new Dictionary<string, int>();
    private Dictionary<string, int> taskTypes = new Dictionary<string, int>();
    private Dictionary<int, string> miniGames = new Dictionary<int, string>();
	
	
	//feito por Hyago
	//private WordList wordList = new WordList();
	private TasksList taskList = new TasksList();
	private TasksTypesList taskTypesList = new TasksTypesList();
	private AIGameConfiguration currentePlayerConf;
	
	
	public static string currentPlayerPath = string.Empty;
	//---

	public TaskManager()
	{
		foreach(Word w in UserManager.CurrentWordList.arrayList)
		{
			words.Add(w.Name, w.WordId);
		}
		
		foreach(TaskType tt in UserManager.CurrentTaskTypesList.arrayList)
		{
			this.taskTypes.Add(tt.Name,tt.Id);
		}
		
		foreach(Task t in UserManager.CurrentTasksList.arrayList)
		{
			this.tasks.Add(t);
		}
	}

   

    public void DisplayTasks()
    {
        foreach (Task task in taskList.arrayList)
        {
            Debug.Log(task.Id + " - " + task.MiniGame + " - " + task.Latency + " - " + task.Difficulty + " - " +
                              task.Correct + " - " + task.CompareNumber + " - " + task.TaskType + " - " + task.Model);			
        }

    }

    public ArrayList GetTasks()
    {
        return tasks;
    }
	

    public ArrayList GetTasksByModel(short model)
    {
		ArrayList selectedTasks = new ArrayList();
		
		for (int i = 0; i < taskList.arrayList.Count; i++) {
			if (taskList.arrayList[i].Model == model)
            {
                selectedTasks.Add(taskList.arrayList[i]);
            }
		}

        return selectedTasks;
    }

    public ArrayList GetTasksByModel(ArrayList source, short model)
    {
		
        ArrayList selectedTasks = new ArrayList();

        foreach (Task task in source)
        {
            if (task.Model == model)
            {
                selectedTasks.Add(task);
            }
        }

        return selectedTasks;
    }

    public ArrayList GetTasksByModel(string model)
    {
		ArrayList selectedTasks = new ArrayList();

        foreach (Task task in taskList.arrayList)
        {
            if (task.Model == words[model])
            {
                selectedTasks.Add(task);
            }
        }

        return selectedTasks;
    }

    public ArrayList GetTasksByModel(ArrayList source, string model)
    {
        ArrayList selectedTasks = new ArrayList();

        foreach (Task task in source)
        {
            if (task.Model == words[model])
            {
                selectedTasks.Add(task);
            }
        }

        return selectedTasks;
    }

    public ArrayList GetTasksByType(string type)
    {
        ArrayList selectedTasks = new ArrayList();

        foreach (Task task in taskList.arrayList)
        {
            if (task.TaskType == taskTypes[type])
            {
                selectedTasks.Add(task);
            }
        }

        return selectedTasks;
    }

    public ArrayList GetTasksByType(ArrayList source, string type)
    {
        ArrayList selectedTasks = new ArrayList();

        foreach (Task task in source)
        {
            //			Task task = GetTaskById(task);
            if (task.TaskType == taskTypes[type])
            {
                selectedTasks.Add(task);
            }
        }



        return selectedTasks;
    }

    public Task GetTaskById(int id)
    {
        foreach (Task task in tasks)
        {
            if (task.Id == id)
            {
                return task;
            }
        }
        return null;
    }

    public ArrayList GetTasksByMiniGame(int miniGame)
    {
        ArrayList selectedTasks = new ArrayList();

        foreach (Task task in tasks)
        {
            if (task.MiniGame.Equals(miniGames[miniGame]))
            {
                selectedTasks.Add(task);
            }
        }

        return selectedTasks;
    }

    public ArrayList GetTasksByMiniGame(ArrayList source, int miniGame)
    {
        ArrayList selectedTasks = new ArrayList();

        foreach (Task task in source)
        {
            if (task.MiniGame.Equals(miniGames[miniGame]))
            {
                selectedTasks.Add(task);
            }
        }

        return selectedTasks;
    }

    public ArrayList GetTasksByCompareCount(ArrayList source, int compNum)
    {
        ArrayList selectedTasks = new ArrayList();

        foreach (Task task in source)
        {
            if (task.CompareNumber == compNum)
            {
                selectedTasks.Add(task);
            }
        }

        return selectedTasks;
    }

    public ArrayList GetTasksByChoices(ArrayList choices)
    {
        return GetTasksByChoices(tasks, choices);
    }

    public ArrayList GetTasksByChoices(ArrayList source, ArrayList choices)
    {
        ArrayList selectedTasks = new ArrayList();

        foreach (Task task in source)
        {
            for (int j = 0; j < choices.Count; j++)
            {
                if (choices[j].GetType() == typeof(int))
                {
                    if (task.Choices.Contains(choices[j]) && !selectedTasks.Contains(task.Id))
                    {
                        selectedTasks.Add(task);
                    }
                }
                else
                {
                    if (task.Choices.Contains(words[(string)choices[j]]) && !selectedTasks.Contains(task.Id))
                    {
                        selectedTasks.Add(task);
                    }
                }

            }
        }

        if (selectedTasks.Count == 0)
        {
            Debug.Log("Nenhuma tentativa encontrada");
        }
        return selectedTasks;
    }

    public ArrayList GetTasksByChoices(ArrayList source, int wordId)
    {
        ArrayList selectedTasks = new ArrayList();

        foreach (Task task in source)
        {
            if (task.Choices.Contains(wordId))
            {
                selectedTasks.Add(task);
            }
        }

//        if (selectedTasks.Count == 0)
//        {
//            Debug.Log("Nenhuma tentativa encontrada");
//        }
        return selectedTasks;
    }

    public ArrayList GetTasks(string model, string type, int compCount, ArrayList choices)
    {
        ArrayList selectedTasks = new ArrayList();

        bool hasModel = model.Length > 0 ? true : false;
        bool hasType = type.Length > 0 ? true : false;
        bool hasCompCount = compCount != -1 ? true : false;
        bool hasChoices = choices.Count > 0 ? true : false;

        if (hasModel && hasType && hasCompCount && hasChoices)
        { //tudo é especificado
            selectedTasks = GetTasksByModel(tasks, model);
            selectedTasks = GetTasksByType(selectedTasks, type);
            selectedTasks = GetTasksByCompareCount(selectedTasks, compCount);
            selectedTasks = GetTasksByChoices(selectedTasks, choices);
        }

        if (!hasModel)
        {
            if (!hasType)
            {
                if (!hasCompCount)
                {
                    if (!hasChoices)
                    { //nada é especificado. Deve-se retornar tudo
                        return GetTasks();
                    }
                    else
                    { //só as escolhas são especificadas
                        selectedTasks = GetTasksByChoices(tasks, choices);
                    }
                }
                else
                { //numComparação é especidicado
                    selectedTasks = GetTasksByCompareCount(tasks, compCount);

                    if (hasChoices) //numComparação e escolhas são especificados.
                        selectedTasks = GetTasksByChoices(selectedTasks, choices);
                }
            }
            else
            { //taskTypes é especificado
                selectedTasks = GetTasksByType(tasks, type);

                if (hasCompCount) //tipoTentaiva e numComparação são especificados.
                    selectedTasks = GetTasksByCompareCount(selectedTasks, compCount);

                if (hasChoices) //tipoTentaiva e escolhas são especificados.
                    selectedTasks = GetTasksByChoices(selectedTasks, choices);
            }
        }
        else
        { //modelo é especificado
            selectedTasks = GetTasksByModel(tasks, model);

            if (hasType) //modelo e taskTypes são especificados.
                selectedTasks = GetTasksByType(selectedTasks, type);

            if (hasCompCount) //modelo e numComparação são especificados.
                selectedTasks = GetTasksByCompareCount(selectedTasks, compCount);

            if (hasChoices) //modelo e escolhas são especificados.
                selectedTasks = GetTasksByChoices(selectedTasks, choices);
        }


        if (selectedTasks.Count > 0)
        {
            return selectedTasks;
        }

        Debug.Log("Nada encontrado");
        return null;
    }

    public ArrayList GetTasksToRead(string model)
    {
		if(model.Equals(""))
			throw new Exception("model errado");
				
        ArrayList readTasks = new ArrayList();

        foreach (Task task in tasks)
        {
            if (task.Model.Equals(words[model]) && ( task.TaskType == taskTypes["AB"] || task.TaskType == taskTypes["AC"] ||
                                                     task.TaskType == taskTypes["BC"] || task.TaskType == taskTypes["CB"] ))
            {
                readTasks.Add(task);
            }
        }

        return readTasks;
    }
	
	//duvida
    public ArrayList GetTasksToWrite(string model)
    {
		if(model.Equals(""))
			throw new Exception("model errado");
		
        ArrayList writeTasks = new ArrayList();

        foreach (Task task in tasks)
        {
            if (task.Model.Equals(words[model]) && ( task.TaskType == taskTypes["AE"]
									                || task.TaskType == taskTypes["CE"]
									                || task.TaskType == taskTypes["BE"]))
            {
                writeTasks.Add(task);
            }
        }

        if (writeTasks.Count > 0)
        {
            return writeTasks;
        }
		
        return null;
    }
	
	public void AddTask(Task task){
		
		AddTentativa(task.Id, task.MiniGame, task.Latency, task.Difficulty, task.CompareNumber, task.Correct, task.TaskType, task.Model, task.Choices);
	}

    public void AddTentativa(int id, int miniGame, float latency, double difficulty, int compCount, byte correct, int taskType, short model, ArrayList choices)
    {
        try
        {
            Task aux = new Task();
            aux.Id = id;
            aux.MiniGame = miniGame;
            aux.Latency = latency;
            aux.Difficulty = difficulty;
            aux.Model = model;
            aux.Correct = correct;
            aux.TaskType = taskType;
            aux.CompareNumber = compCount;

            for (int j = 0; j < choices.Count; j++)
            {
                aux.Choices.Add(choices[j]);
            }

            tasks.Add(aux);

            TaskCount++;
        }
        catch
        {
            Debug.Log("Problemas ao adicionar tentativa.");
        }
    }

    public string GetModelName(short model)
    {

        foreach (string key in words.Keys)
        {
            if (words[key] == model)
            {
                return key;
            }
        }

        return "";

    }

    public string GetTaskTypeName(int taskType)
    {

        foreach (string key in taskTypes.Keys)
        {
            if (taskTypes[key] == taskType)
            {
                return key;
            }
        }
        return "";
    }

    public Dictionary<string, int> GetWords()
    {		
        return words;
    }
    
}
