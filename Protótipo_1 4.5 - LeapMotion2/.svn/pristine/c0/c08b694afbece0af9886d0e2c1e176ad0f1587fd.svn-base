using UnityEngine;
using System;
using System.Collections;
using System.Collections.Generic;

public class TestScenario : MonoBehaviour
{
	//atributos para a caixa da tela
	private float horOffset = 10;
	private float verOffset = 20;
	private float boxWidth;
	private float boxHeigth;
	
	//atributos para o efeito de trannsição de tela
	private string currentModel = "Modelo";
	public int buttonSize = 60;
	public int space = 5;
	public int qtdTarefas = 1;
	public string task_txt_path = @"Assets\Scripts\BD\tentativas_teste\tasks.1TesteLGSPreenchido.txt";
	public string word_txt_path = @"Assets\Scripts\BD\words.txt";
	private TaskManager tm;
	private WordManager wm ;
	private Config config;
	private MachineLearning ml;
	private LogicaDeSessao sl ;
	private DifficultyIdentifier di;
	private ArrayList palavrasLidas = new ArrayList ();
	private ArrayList tarefasLidas = new ArrayList ();
	private Task tarefa;
	private bool jogando;
	private int indice = 0;

	void Start ()
	{
		boxWidth = Screen.width - 2 * horOffset;
		boxHeigth = Screen.height - 2 * verOffset;		
	
		tm = transform.gameObject.AddComponent<TaskManager> ();
		tm.ReadTask (task_txt_path);             					// Ler tentativas
		tarefasLidas = tm.GetTasks ();
		tm.DisplayTasks ();

		wm = transform.gameObject.AddComponent<WordManager> ();
		wm.ReadWord (word_txt_path);             					// Ler palavras do txt
		palavrasLidas = wm.GetWords ();
		
		sl = transform.gameObject.AddComponent<LogicaDeSessao> ();
		
		config = new Config ();
		config.id_Da_Ultima_Tarefa_Do_Pre_Teste = ((Task)tarefasLidas [tarefasLidas.Count - 1]).Id;
		config.numero_De_Tarefas_A_Serem_Geradas = 3;
		sl.numTarefasGeradas = config.numero_De_Tarefas_A_Serem_Geradas;
			
		ml = new MachineLearning (config);
		
		//Instancia de dificuldade
		di = new DifficultyIdentifier (ref palavrasLidas);
		//Professa dificuldade das tarefas
		di.ProcessarDifEmLote (ref tarefasLidas);
		//Processa dificuldade maxima das palavras
		di.ProcessarDificuldadeMaxima (ref palavrasLidas);
	}
	
	bool acertaTudo = false;
	bool erraTudo = false;
	bool preencheAleatorio = false;
	bool gerandoSessao = false;

	void Update ()
	{
		if (acertaTudo || erraTudo || preencheAleatorio) {
			if (indice < 70) {
				if (acertaTudo) {
					if (escolhas != null && escolhas.Length > 0) {
						escolhas [0] = true;	
					}
				}
				if (erraTudo) {
					if (escolhas != null && escolhas.Length > 1) {
						escolhas [1] = true;	
					}
				}
				if (preencheAleatorio) {
					if (escolhas != null && escolhas.Length > 0) {
						escolhas [(int)(UnityEngine.Random.value * escolhas.Length)] = true;	
					}
				}
				
			} else {
				acertaTudo = false;	
				erraTudo = false;	
				preencheAleatorio = false;	
			}
		}
		
		if (Input.GetKeyDown (KeyCode.Alpha1)) {
			acertaTudo = true;	
		}	
		
		if (Input.GetKeyDown (KeyCode.Alpha2)) {
			erraTudo = true;	
		}	
		
		if (Input.GetKeyDown (KeyCode.Alpha3)) {
			preencheAleatorio = true;	
		}	
		
		if (!jogando && tarefasLidas != null && tarefasLidas.Count > 0) {
			if (indice < tarefasLidas.Count) {
				gerandoSessao = false;
				tarefa = (Task)tarefasLidas [indice];
				jogando = true;
				currentModel = wm.GetWord (tarefa.Model);
			} else {
				if (!gerandoSessao) {
					gerandoSessao = true;
					GerarLogicaDeSessao ();
				}
			}
		}
		
		if (escolhas != null) {
			var i = 0;
			foreach (bool botao in escolhas) {
				if (botao) {
					
					if (i == 0) {
						tarefa.Correct = 1;	
					} else {
						tarefa.Correct = 0;	
					}
					tarefa.DateTime = DateTime.Now;
					
					tarefasConcluidas.Add (tarefa);
					
					indice++;
					scrollTarefasPosition += new Vector2 (0, 20);
					jogando = false;
					break;
				}
				i++;
			}
		} else {
			escolhas = new bool[tarefa.Choices.Count + 1];
		}
		
	}
	
	void GerarLogicaDeSessao ()
	{
		//Debug.LogWarning (tarefa.Id.ToString () + " -- " + config.id_Da_Ultima_Tarefa_Do_Pre_Teste.ToString ());
		if (tarefa.Id > config.id_Da_Ultima_Tarefa_Do_Pre_Teste) {
			sl.AtualizarListaAuxiliarESonda (wm, ml, tm);
			sl.VerificarSonda (tarefa, (Word)wm.SelectWords (tarefa.Model) [0]);
		}
		
		sl.StartLogicaDeSessao (tm, ml, wm);
		sl.VerificarSessao (tm, ml, wm);
		
		//Debug.LogWarning (sl.GetTarefaGeradaParaListaAux ().Count.ToString ());
		//tarefasLidas.AddRange (sl.GetTarefaGeradaParaListaAux ());
	
	}
	
	#region GUI
	
	bool[] escolhas;
	private Vector2 scrollTarefasPosition = Vector2.zero;
	private Vector2 scrollPalavraPosition = Vector2.zero;
	private	Vector2 scrollListaEnsinadaPosition = new Vector2 ();
	private ArrayList tarefasConcluidas = new ArrayList ();
	Rect botoesRect;
	Rect palavrasRect;
	Rect tarefasRect;
	Rect listaEnsinadaRect;
	Rect createTableRect;
	Rect gameOverRect;

	void OnGUI ()
	{
		
		
		var boxW = Screen.width - 4 * horOffset;
		var boxH = (Screen.height - 4 * verOffset);	
		
	
		
		
		palavrasRect = GUI.Window (0, new Rect (2 * horOffset, 2 * verOffset, (boxW / 5) * 2 - 10, (boxH / 2) - 20), DoPalavrasTable, "PALAVRAS");
		
		//createTableRect = GUI.Window (4, new Rect (2 * horOffset + (boxW / 5) * 3, 2 * verOffset + (boxH / 4) , (boxW / 10) * 3, (boxH / 4) - 20), DoCreateTable, "TABLE");
	
		
		DoCreateTable ();
	
		
		botoesRect = GUI.Window (1, new Rect (2 * horOffset + (boxW / 5) * 2, 2 * verOffset, (boxW / 5) * 3, (boxH / 2) - 20), DoBotoesTable, "TAREFA");
		
		if (tarefasLidas != null && tarefasLidas.Count > 0) {
				
			tarefasRect = GUI.Window (2, new Rect (2 * horOffset, Screen.height / 2, boxW, boxH / 2), DoTarefasTable, "Tarefas Concluidas");
		}
		
		listaEnsinadaRect = new Rect (botoesRect.x + 20, botoesRect.y + botoesRect.height / 2, (botoesRect.width / 2) - 40, (botoesRect.height / 2) - 40);
			
		
			
		if (sl.isGameOver ()) {
			
			gameOverRect = GUI.Window (6, new Rect (boxW / 2 - 100, boxH / 2 - 100, 200, 200), DoGameOver, "GAME OVER");
			
		}
	}
	
	void DoGameOver (int windowId)
	{
		GUI.color = Color.white;
		GUI.Box (new Rect (0, 50, 200, 170), "GAME OVER MANOLOS!!!");
	}
	
	void DoBotoesTable (int windowId)
	{
		GUI.color = Color.yellow;
		GUI.Box (new Rect (horOffset, verOffset + 20, botoesRect.width - horOffset * 2, 40), currentModel.ToUpper ());
		GUI.color = Color.white;
		if (escolhas != null && escolhas.Length > 0) {
			if (tarefa != null && tarefa.Choices != null) {
				int currentPos = (int)(botoesRect.width / 2) - (((tarefa.Choices.Count + 1) * (buttonSize + space)) / 2);
				
				escolhas = new bool[tarefa.Choices.Count + 1];
				escolhas [0] = GUI.Button (new Rect (currentPos, 100, buttonSize, buttonSize), wm.GetWord (tarefa.Model));
				
				currentPos += buttonSize + space;
				for (int i = 0; i < tarefa.Choices.Count; i++) {
					
					escolhas [i + 1] = GUI.Button (new Rect (currentPos, 100, buttonSize, buttonSize), wm.GetWord ((int)tarefa.Choices [i]));
					currentPos += buttonSize + space;
				}
			}
		}
	}

	void DoTarefasTable (int windowId)
	{
		var boxW = Screen.width - 4 * horOffset;
		var boxH = (Screen.height - 4 * verOffset) / 2;		
		
		var listaDeTarefas = tarefasConcluidas.ToArray ();
		
		var rect = new Rect (5, 38, boxW - 10, boxH - 40);
		
		GUI.Box (rect, "");
		
		var sView = new Rect (0, 20, tarefasRect.width - 30, listaDeTarefas.Length * 20);
		
		GUI.Box (new Rect (5, 20, boxW - 10, 20), "");
	
		var cellSize = (boxW - 10) / 11f;
		var cellPos = 5f;
		CreateCell (new Rect (cellPos, 20, 30, 20), new GUIContent ("ID"));
		
		cellPos += 30;
		CreateCell (new Rect (cellPos, 20, cellSize, 20), new GUIContent ("Modelo"));
		
		cellPos += cellSize;
		cellSize /= 2;
		CreateCell (new Rect (cellPos, 20, cellSize, 20), new GUIContent ("Comp"));
		
		cellPos += cellSize;
		CreateCell (new Rect (cellPos, 20, cellSize, 20), new GUIContent ("Laten"));
		
		cellPos += cellSize;
		cellSize *= 4;
		CreateCell (new Rect (cellPos, 20, cellSize, 20), new GUIContent ("Data"));
		
		cellPos += cellSize;
		cellSize /= 2;
		CreateCell (new Rect (cellPos, 20, cellSize, 20), new GUIContent ("Tipo"));
		
		cellPos += cellSize;
		//cellSize /= 2;
		CreateCell (new Rect (cellPos, 20, cellSize - 30, 20), new GUIContent ("Correcao"));
		
		cellPos += cellSize - 30;
		cellSize *= 5;
		CreateCell (new Rect (cellPos, 20, cellSize, 20), new GUIContent ("Escolhas Erradas"));
		
		GUI.color = Color.white;
		
			
		scrollTarefasPosition = GUI.BeginScrollView (rect, scrollTarefasPosition, sView);
		
		var firstPos = 20;
		
		for (int i = 0; i < listaDeTarefas.Length; i++) {
			
			if (((Task)listaDeTarefas [i]).Correct != 0) {
				GUI.color = new Color (155 / 255f, 255 / 255f, 150 / 255f);
			} else {
				GUI.color = new Color (255 / 255f, 150 / 255f, 150 / 255f);
			}
			
			GUI.Box (new Rect (0, firstPos + 20 * (i), boxW, 20), "");
			
			
			
			cellSize = (boxW) / 11f;
			cellPos = 5f;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), 30, 20), ((Task)listaDeTarefas [i]).Id.ToString ());
			cellPos += 30;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), cellSize, 20), wm.GetWord (((Task)listaDeTarefas [i]).Model));
			cellPos += cellSize;
			cellSize /= 2;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), cellSize, 20), ((Task)listaDeTarefas [i]).CompareNumber.ToString ());
			cellPos += cellSize;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), cellSize, 20), ((Task)listaDeTarefas [i]).Latency.ToString ());
			cellPos += cellSize;
			cellSize *= 4;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), cellSize, 20), ((Task)listaDeTarefas [i]).DateTime.ToString ());
			cellPos += cellSize;
			cellSize /= 2;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), cellSize, 20), tm.GetTaskTypeName (((Task)listaDeTarefas [i]).TaskType));
			cellPos += cellSize;
			//cellSize /= 2;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), cellSize, 20), ((Task)listaDeTarefas [i]).Correct.ToString ());
			cellPos += cellSize;
			for (int j = 0; j < ((Task)listaDeTarefas [i]).Choices.Count; j++) {
				GUI.Label (new Rect (cellPos + (j * cellSize), firstPos + 20 * (i), cellSize, 20), wm.GetWord ((int)((Task)listaDeTarefas [i]).Choices [j]));
			}
			
		}
		GUI.color = Color.white;
		GUI.EndScrollView ();
	}

	void CreateCell (Rect rect, GUIContent content)
	{
		CreateCell (rect, content, Color.white);
	}
	
	void CreateCell (Rect rect, GUIContent content, Color color)
	{
		if (color != null)
			GUI.color = color;
		GUI.BeginGroup (rect);
		GUI.Box (new Rect (0, 0, rect.width, rect.height), content);
		GUI.EndGroup ();
		GUI.color = Color.white;
	}
	
	#endregion
	
	
	#region PALAVRAS TABELA
	
	void DoPalavrasTable (int windowId)
	{
		var boxW = palavrasRect.width;
		var boxH = palavrasRect.height;		
		
		var listaPalavras = palavrasLidas;
		
		var rect = new Rect (5, 38, boxW - 10, boxH - 10);
		
		GUI.Box (rect, "");
		
		var sView = new Rect (0, 20, boxW, listaPalavras.Count * 20);
		
		GUI.Box (new Rect (5, 20, boxW - 10, 20), "");
	
		var cellSize = 0f;
		var cellPos = 5f;
		CreateCell (new Rect (cellPos, 20, 30, 20), new GUIContent ("ID"));
		
		cellSize = (boxW - 40) / 7f;
		cellPos += 30;
		CreateCell (new Rect (cellPos, 20, cellSize, 20), new GUIContent ("Nome"));
		
		cellPos += cellSize;
		CreateCell (new Rect (cellPos, 20, cellSize, 20), new GUIContent ("LRead"));
		
		cellPos += cellSize;
		CreateCell (new Rect (cellPos, 20, cellSize, 20), new GUIContent ("LWrite"));
		
		cellPos += cellSize;
		CreateCell (new Rect (cellPos, 20, cellSize, 20), new GUIContent ("LDRead"));
		
		cellPos += cellSize;
		CreateCell (new Rect (cellPos, 20, cellSize, 20), new GUIContent ("LDWrite"));
		
		cellPos += cellSize;
		CreateCell (new Rect (cellPos, 20, cellSize, 20), new GUIContent ("MReadD"));
		
		cellPos += cellSize;
		CreateCell (new Rect (cellPos, 20, cellSize, 20), new GUIContent ("MWriteD"));
		
		GUI.color = Color.white;
		
			
		scrollPalavraPosition = GUI.BeginScrollView (rect, scrollPalavraPosition, sView);
		
		var firstPos = 20;
		
		for (int i = 0; i < listaPalavras.Count; i++) {
			
			if (((Word)listaPalavras [i]).LearnedRead != 0 && ((Word)listaPalavras [i]).LearnedWrite != 0) {
				GUI.color = new Color (155 / 255f, 255 / 255f, 150 / 255f);
			} else {
				GUI.color = new Color (255 / 255f, 150 / 255f, 150 / 255f);
			}
			
			GUI.Box (new Rect (0, firstPos + 20 * (i), boxW, 20), "");
			
			cellPos = 5f;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), 30, 20), ((Word)listaPalavras [i]).wordId.ToString ());
			
			cellSize = (boxW - 40) / 7f;
			cellPos += 30;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), cellSize, 20), ((Word)listaPalavras [i]).Name);
			
			cellPos += cellSize;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), cellSize, 20), ((Word)listaPalavras [i]).LearnedRead.ToString ());
			
			cellPos += cellSize;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), cellSize, 20), ((Word)listaPalavras [i]).LearnedWrite.ToString ());
			
			cellPos += cellSize;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), cellSize, 20), ((Word)listaPalavras [i]).LearningDegreeRead.ToString ());
			
			cellPos += cellSize;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), cellSize, 20), ((Word)listaPalavras [i]).LearningDegreeWrite.ToString ());
			
			cellPos += cellSize;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), cellSize, 20), ((Word)listaPalavras [i]).MaxReadDif.ToString ("0.###"));
			
			cellPos += cellSize;
			GUI.Label (new Rect (cellPos, firstPos + 20 * (i), cellSize, 20), ((Word)listaPalavras [i]).MaxWriteDif.ToString ("0.###"));

//			cellPos = (boxW) / 2f;
		
			
		}
		GUI.color = Color.white;
		GUI.EndScrollView ();
	}
	
	void DoCreateTable ()
	{
		
//		Dictionary<string, float> cab = new Dictionary<string, float> (){
//			{"A",1},{"B",0.5f},{"C",3},{"D",2}	
//		};
//		
//		createTableRect = new Rect (100, 200, 300, 100);
//		
//		scrollListaEnsinadaPosition = CreateTable (scrollListaEnsinadaPosition, createTableRect, cab, new ArrayList (){"1","2","3","4","5","6","7","8","9","10","11","12","13","14","15","16","17","18"});
	}
	
	Vector2 CreateTable (Vector2 scrollPosition, Rect rect, Dictionary<string, float> map, ArrayList info)
	{
		GUI.Box (rect, "");
		GUI.BeginGroup (rect);		
//		GUI.Label(new Rect(0,0,100,20),"TEXTO 1");	
//		GUI.Label(new Rect(0,21,100,20),"TEXTO 2");
//		GUI.Label(new Rect(101,0,100,20),"TEXTO 3");
//		GUI.Label(new Rect(101,21,100,20),"TEXTO 4");
		
		
		Vector2 scrollRetorno = scrollPosition;
		
		
				
		var cellSize = 0f;
		var cellPos = 0f;
		
		
		
		//Cria cabeçalho
		var temp = new string[map.Keys.Count];
		map.Keys.CopyTo (temp, 0);		
		float totalSize = 0f;
		for (int i = 0; i <  temp.Length; i++) {
			totalSize += map [temp [i]];
		}
		
		var unit = (rect.width / totalSize);
		
		for (int i = 0; i <  temp.Length; i++) {
			cellSize = map [temp [i]] * unit;
			CreateCell (new Rect (cellPos, 0, cellSize, 20), new GUIContent (temp [i].ToUpper ()));
			cellPos += cellSize;
			//GUI.Label (new Rect (cellPos-cellSize, 0, 100, 20), ((int)cellPos).ToString()+",");
			
		}
		
			
	
		
		//NO caso de criar celulas com cores
		GUI.color = Color.white;
		
		
		//Cria view
		var firstPos = 20;
		var scrollView = new Rect (0, firstPos, rect.width - 30, ((int)Math.Ceiling ((double)info.Count / map.Keys.Count)) * 20);
		//GUI.Label (new Rect (5, 0, 100, 20), scrollView.x.ToString () + ", " + scrollView.y.ToString () + ", " + scrollView.width.ToString () + ", " + scrollView.height.ToString ());
	
	
		
		scrollRetorno = GUI.BeginScrollView (new Rect (0, firstPos, rect.width, rect.height - firstPos), scrollRetorno, scrollView);
		
		
		var col = 0;
		var linha = -1;
		cellPos = 5f;	
		
		for (int i = 0; i < info.Count; i++) {
			
			if (col == 0)
				GUI.Box (new Rect (0, firstPos + 20 * (++linha), rect.width, 20), "");
						
			cellSize = map [temp [col++]] * unit;
			
			GUI.Label (new Rect (cellPos, firstPos + 20 * (linha), cellSize, 20), (string)info [i]);
			cellPos += cellSize;
			
			if (col >= temp.Length) {
				col = 0;
				cellPos = 5f;
			}
		}
		
		GUI.color = Color.white;
		GUI.EndScrollView ();
		
		
		GUI.EndGroup ();
		return scrollRetorno;
	}
	
	
	#endregion
}
