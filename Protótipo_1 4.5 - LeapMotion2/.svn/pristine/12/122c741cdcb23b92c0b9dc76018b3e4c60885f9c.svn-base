using UnityEngine;
using System.Collections;

public class CameraManager : MonoBehaviour
{

	public bool lockVerticalCamera = true;
	public bool lockHorizontalCamera = false;
	public float horizontalCameraLimit = 4.0f;
	public float verticalCameraLimit = 4.0f;
	public float zPosition = -20f;
	public GameObject target;
	private float initHorLimit = 0f;
	private float finalHorLimit = 0f;
	public bool blockLeft;
	public bool blockRight;
	public bool blockTop;
	public bool blockBottom;
	
	
	// Use this for initialization
	void Start ()
	{
		initHorLimit = Camera.main.transform.position.x - (horizontalCameraLimit);
		finalHorLimit = Camera.main.transform.position.x;
		
	}

	
	
	// Update is called once per frame
	void Update ()
	{
		if (Camera.main != null && target != null) {
			
			float horCamPosition = Camera.main.transform.position.x;
			float verCamPosition = Camera.main.transform.position.y;
			
			if (target.transform.rotation.eulerAngles.y < 180) {
		
				if (target.transform.position.x > finalHorLimit - 2f) {
					initHorLimit = Camera.main.transform.position.x - (horizontalCameraLimit);
					finalHorLimit = Camera.main.transform.position.x;
					horCamPosition = ((lockHorizontalCamera) ? 0 : target.transform.position.x + 2f);
					//Camera.main.transform.position = Vector3.Slerp (Camera.main.transform.position, finalCameraPostion, 0.05f);
					
				}
						
				#region Debug (Pode Deletar)
				Debug.DrawLine (
					new Vector3 (initHorLimit, Camera.main.transform.position.y - Camera.main.pixelHeight / 2, target.transform.position.z), 
					new Vector3 (initHorLimit, Camera.main.transform.position.y + Camera.main.pixelHeight / 2, target.transform.position.z),
					Color.red
					);
				Debug.DrawLine (
					new Vector3 (finalHorLimit, Camera.main.transform.position.y - Camera.main.GetScreenHeight () / 2, target.transform.position.z), 
					new Vector3 (finalHorLimit, Camera.main.transform.position.y + Camera.main.GetScreenHeight () / 2, target.transform.position.z),
					Color.blue
					);
				#endregion
			} else {
		
				if (target.transform.position.x < initHorLimit + 2f) {
					initHorLimit = Camera.main.transform.position.x;
					finalHorLimit = Camera.main.transform.position.x + (horizontalCameraLimit);
					horCamPosition = ((lockHorizontalCamera) ? 0 : target.transform.position.x - 2f);
					//var finalCameraPostion = new Vector3 (((lockHorizontalCamera) ? 0 : target.transform.position.x - /* 200f * Time.deltaTime*/ 2f), ((lockVerticalCamera) ? 0 : target.transform.position.y) + (Camera.main.orthographicSize / 1.4f), -20f);
					//Camera.main.transform.position = Vector3.Slerp (Camera.main.transform.position, finalCameraPostion, 0.05f);
				}
				
				#region Debug (Pode Deletar)
				Debug.DrawLine (
					new Vector3 (initHorLimit, Camera.main.transform.position.y - Camera.main.pixelHeight / 2, target.transform.position.z), 
					new Vector3 (initHorLimit, Camera.main.transform.position.y + Camera.main.pixelHeight / 2, target.transform.position.z),
					Color.red
					);
				Debug.DrawLine (
					new Vector3 (finalHorLimit, Camera.main.transform.position.y - Camera.main.GetScreenHeight () / 2, target.transform.position.z), 
					new Vector3 (finalHorLimit, Camera.main.transform.position.y + Camera.main.GetScreenHeight () / 2, target.transform.position.z),
					Color.blue
					);
				#endregion
			}
			
		
			verCamPosition = ((lockVerticalCamera) ? 0 : target.transform.position.y) + (Camera.main.orthographicSize / 1.4f);

			if (blockLeft && Camera.main.transform.position.x - horCamPosition > 0) {
				horCamPosition = Camera.main.transform.position.x;
			}
			if (blockRight && Camera.main.transform.position.x - horCamPosition < 0) {
				horCamPosition = Camera.main.transform.position.x;
			}
			
			if (blockBottom && Camera.main.transform.position.y - verCamPosition > 0) {
				verCamPosition = Camera.main.transform.position.y;
			}
			
			if (blockTop && Camera.main.transform.position.y - verCamPosition < 0) {
				verCamPosition = Camera.main.transform.position.y;
			}
			
			
			Camera.main.transform.position = Vector3.Slerp (Camera.main.transform.position, new Vector3 (horCamPosition, Camera.main.transform.position.y, zPosition), 0.05f);
			Camera.main.transform.position = Vector3.Slerp (Camera.main.transform.position, new Vector3 (Camera.main.transform.position.x, verCamPosition, zPosition), 0.2f);
			
			
		}
	}
	
	
	#region Camera Region
	public static bool IsOnCamera (GameObject obj, bool onYAxys)
	{
		if (!onYAxys) {
			return IsOnCamera (obj);
		}
		
		return (
				IsOnCamera (obj) || 
				IsCameraUnderObject (obj) || 
				IsCameraOverObject (obj)
				);
		
	}
	
	public static bool IsOnCamera (GameObject obj)
	{
		if (obj == null) {
			return false;
		}

		Plane[] planes = GeometryUtility.CalculateFrustumPlanes (Camera.mainCamera);
		return GeometryUtility.TestPlanesAABB (planes, obj.collider.bounds);
	}

	public static bool IsCameraUnderObject (GameObject obj)
	{
		if (obj == null) {
			return false;
		}
		var pos = BoundsToScreenRect (obj.collider.bounds);
		return (pos.x + pos.width >= 0) && (pos.x <= Screen.width) && (pos.y + pos.height < Camera.main.transform.position.y);
	}

	public static bool IsCameraOverObject (GameObject obj)
	{
		if (obj == null) {
			return false;
		}
		var pos = BoundsToScreenRect (obj.collider.bounds);
		return (pos.x + pos.width >= 0) && (pos.x <= Screen.width) && (pos.y + pos.height > Camera.main.transform.position.y);
	}

	public static  Rect BoundsToScreenRect (Bounds bounds)
	{
		
		Vector3 origin = Camera.main.WorldToScreenPoint (new Vector3 (bounds.min.x, bounds.max.y, 0f));
		Vector3 extent = Camera.main.WorldToScreenPoint (new Vector3 (bounds.max.x, bounds.min.y, 0f));

		return new Rect (origin.x, Screen.height - origin.y, extent.x - origin.x, origin.y - extent.y);
	}
	
	#endregion
	
	
}

