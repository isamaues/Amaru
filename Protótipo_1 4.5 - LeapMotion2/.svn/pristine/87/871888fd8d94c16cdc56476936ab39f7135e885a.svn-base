using UnityEngine;
using System.Collections;

public class PlayerMovement : MonoBehaviour
{
	
	public enum Direction
	{
		Left,
		Right,
	}
	
	public Vector3 MoveDirection ;

	public float VerticalVelocity { get; set; }
	
	public float MoveSpeed = 7f;
	public float JumpSpeed = 8f;
	public float Gravity = 20f;
	public float variance;
	public Direction direction;
	public bool canMove = true;
	private CharacterController controller;
	private bool _paused = false;

	public bool PauseMovement {
		get {
			return _paused;
		}
		set {
			_paused = value;
		}
	}
	
	// Use this for initialization
	void Start ()
	{
	}
	
	// Update is called once per frame
	void Update ()
	{
		if (!_paused) {
			ProcessMotion ();
		
			if (Input.GetKey (KeyCode.R)) {
				ResetPosition ();
			}
		}
	}
	
	public void ResetPosition ()
	{
		// TODO reset position
		
	}
	
	public float decreaseGravity = 3f;
	
	void ProcessMotion ()
	{
		controller = transform.GetComponent<CharacterController> ();
		
		var animator = transform.GetComponent<PlayerAnimation> ();
		
		if (controller.isGrounded) {
			
			/*var speedUp = 1f;
			if (Input.GetKey (KeyCode.LeftShift)) {
				//speedUp = speedIncrease;	
				animation ["Walk"].speed = speedIncrease;
				animation ["Idle"].speed = speedIncrease;
				increase = true;
			} else {
				increase = false;
				animation ["Walk"].speed = 1f;		
				animation ["Idle"].speed = 1f;
			}*/
			
			MoveDirection = new Vector3 (Input.GetAxis ("Horizontal"), 0, 0);
			MoveDirection *= MoveSpeed/* * speedUp*/;
			
			if ((Input.GetButtonDown ("Jump")) || (Input.GetKeyDown (KeyCode.UpArrow))) {
				animator.currentState = PlayerAnimation.State.Jump;
				if (animation.IsPlaying ("Jump"))
					animation.Stop ("Jump");
				animation.Play ("Jump"); 
				AudioClip jump = Resources.Load ("Sounds/jump") as AudioClip;
				AudioSource.PlayClipAtPoint (jump, Camera.main.transform.position);
				MoveDirection.y = JumpSpeed;
			}
			
			
			
		} else {
			
			MoveDirection = new Vector3 (Input.GetAxis ("Horizontal") * MoveSpeed, MoveDirection.y, 0);
			
			if (animator.currentState != PlayerAnimation.State.Fall && Input.GetButtonUp ("Jump") && MoveDirection.y >= 0) {
				MoveDirection.y -= decreaseGravity * Gravity * Time.deltaTime;
			}
			
			if (animator.currentState != PlayerAnimation.State.Fall && animator.currentState != PlayerAnimation.State.Jump && animator.currentState != PlayerAnimation.State.Land) {
				animator.currentState = PlayerAnimation.State.Fall;
				animation.CrossFade ("Fall"); 
			}
			
			
		}
		
		
		
		if (Input.GetMouseButton (0)) {
			
			Vector3 position2D = Camera.main.WorldToScreenPoint (transform.position);
		
			if (position2D.x + variance < Input.mousePosition.x) {
				MoveDirection = new Vector3 (1 * MoveSpeed, MoveDirection.y, 0);
			} else if (position2D.x - variance > Input.mousePosition.x) {
				MoveDirection = new Vector3 (-1 * MoveSpeed, MoveDirection.y, 0);
			}
				
		}
		
		if (Input.touches.Length != 0) {	
			Vector3 position2D = Camera.main.WorldToScreenPoint (transform.position);
		
			if (position2D.x + variance < Input.touches [0].position.x) {
				MoveDirection = new Vector3 (1 * MoveSpeed, MoveDirection.y, 0);
			} else if (position2D.x - variance > Input.touches [0].position.x) {
				MoveDirection = new Vector3 (-1 * MoveSpeed, MoveDirection.y, 0);
			}
				
		}
		
		
		MoveDirection.y -= Gravity * Time.deltaTime;
		
		
		if (MoveDirection.x > 0) {
			direction = Direction.Right;
			animator.inMovement = true;
		} else if (MoveDirection.x < 0) {
			direction = Direction.Left;
			animator.inMovement = true;
		} else {
			animator.inMovement = false;	
		}
		
		 	
		
		if (direction == Direction.Right) {
			transform.rotation = Quaternion.Euler (Vector3.Lerp (transform.rotation.eulerAngles, new Vector3 (transform.rotation.eulerAngles.x, 90, transform.rotation.eulerAngles.z), 0.1f));
		} else {
			transform.rotation = Quaternion.Euler (Vector3.Lerp (transform.rotation.eulerAngles, new Vector3 (transform.rotation.eulerAngles.x, 270, transform.rotation.eulerAngles.z), 0.1f));
		}
		
		if (animator.currentState != PlayerAnimation.State.Fall && animator.currentState != PlayerAnimation.State.Jump && animator.currentState != PlayerAnimation.State.Land) {
			if (controller.isGrounded) {
				if (animator.inMovement) {
					animator.currentState = PlayerAnimation.State.Walk;
				} else {
					animator.currentState = PlayerAnimation.State.Idle;
				}
			}
		}
		
		if (MoveDirection.y < 0 && 
			animator.currentState == PlayerAnimation.State.Jump) {
			animator.currentState = PlayerAnimation.State.Fall;
			
		}
		
		if (!canMove) {
			MoveDirection = new Vector3 (0, MoveDirection.y, MoveDirection.z);	
		}
		controller.Move (MoveDirection * Time.deltaTime);
		
		//canMove = true;
	}
	
}
