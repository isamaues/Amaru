using UnityEngine;
using System.Collections;

public class UramaBehaviour : MonoBehaviour
{
	public enum Notifycation
	{
		None,
		View,
		Spoken,
		Written
	}
	
	public GameObject player;
	public Vector3 distanceFromPlayer;
	public float amplitude = 1f;
	public float velocity = 2f;
	public float smoothRange = 0.05f;
	public static bool OnMousePressing;
	public Font uramaFont;
	public int fontSize;
	private Vector3 _intDistFromPlayer;
	private GUIStyle labelStyle;
	public Vector3 ballonDistanceOffset = new Vector3 (2, 4.7f, 0);
	public Texture2D ballonTexture;
	private Sprite ballonSprite;
	private static Sprite imageStimulusSprite;
	private static StringSprite textStimulusSprite;
	private bool lastRunning;
	private int lastScreenWidth;
	public static Notifycation notificationType = Notifycation.None;
	
	public static void Notify ()
	{
		switch (BaseMiniGame.CurrentTaskTypeName [0].ToString ()) {
			
		case "A":
			notificationType = Notifycation.Spoken;
			break;
			
		case "B":
			notificationType = Notifycation.View;
			break;
			
		case "C":
			notificationType = Notifycation.Written;
			break;
			
		default:
			notificationType = Notifycation.None;
			break;
		}
		
		imageStimulusSprite.Textura = MinigameSetup.GetTextureById (UserManager.CurrentTasksList.arrayList [UserManager.CurrentUser.id_Da_Ultima_Tarefa - 1].Model);
		textStimulusSprite.Text = BaseMiniGame.CurrentTaskModelName;
		
		if (notificationType == Notifycation.Spoken)
			AudioSource.PlayClipAtPoint (MinigameSetup.GetAudioById (UserManager.CurrentTasksList.arrayList [UserManager.CurrentUser.id_Da_Ultima_Tarefa - 1].Model), Camera.main.transform.position);
			
		
	}
	
	void Start ()
	{
		OnMousePressing = false; 
		this.ballonSprite = new Sprite (new Rect (0, 0, 236, 175), ballonTexture);
		imageStimulusSprite = new Sprite (new Rect (0, 0, 170, 145), MinigameSetup.GetTextureById (1));
		textStimulusSprite = new StringSprite (new Rect (0, 0, 400, 100), "Ola mundo");
		
		this.lastScreenWidth = Screen.width;
	}
	
	

	// Update is called once per frame
	void Update ()
	{
		if (MinigameSetup.RunningTask) {
			this.ballonSprite.Position3 = transform.position + ballonDistanceOffset;
			
			//mudanÃ§as na tela
			if (lastScreenWidth != Screen.width) {
				this.ballonSprite.AdjustRectangle ();
				imageStimulusSprite.AdjustRectangle ();
				//textStimulusSprite.AdjustRectangle();
				lastScreenWidth = Screen.width;
			}
			
			if (notificationType == Notifycation.View)			
				imageStimulusSprite.Position2 = new Vector2 (this.ballonSprite.Rectangle.x + this.ballonSprite.Rectangle.width / 2 - imageStimulusSprite.Size.x / 2,
								                 this.ballonSprite.Rectangle.y + this.ballonSprite.Rectangle.height / 2 - imageStimulusSprite.Size.y / 2);
			else if (notificationType == Notifycation.Written)
				textStimulusSprite.Rectangle = this.ballonSprite.Rectangle;
			
			TopScreenMoviment ();
		} 
		else 
		{			
			if (player.transform.rotation.eulerAngles.y > 180) {
				_intDistFromPlayer = new Vector3 (-distanceFromPlayer.x, distanceFromPlayer.y, distanceFromPlayer.z);  
				transform.localScale = new Vector3 (Mathf.Abs (transform.localScale.x), transform.localScale.y, transform.localScale.z);
			} else {
				_intDistFromPlayer = new Vector3 (distanceFromPlayer.x, distanceFromPlayer.y, distanceFromPlayer.z);  
				transform.localScale = new Vector3 (-Mathf.Abs (transform.localScale.x), transform.localScale.y, transform.localScale.z);
			}
			
			PingPongMoviment ();
		}
		
		
			
	}
	
	void PingPongMoviment ()
	{
		Vector3 finalPosition = new Vector3 (_intDistFromPlayer.x + player.transform.position.x, (_intDistFromPlayer.y + player.transform.position.y) 
				+ Mathf.PingPong (Time.time * velocity, amplitude), _intDistFromPlayer.z + player.transform.position.z);		
		
		transform.position = Vector3.Slerp (transform.position, finalPosition, smoothRange);		
	}
	
	void TopScreenMoviment ()
	{		 
		Vector3 topRightScreenToWorldPos = Camera.main.ViewportToWorldPoint (new Vector3 (0f, 0.9f, 0f));
		transform.localScale = new Vector3 (-Mathf.Abs (transform.localScale.x), transform.localScale.y, transform.localScale.z);
		_intDistFromPlayer = new Vector3 (topRightScreenToWorldPos.x + transform.renderer.bounds.extents.x, 
											topRightScreenToWorldPos.y - (transform.renderer.bounds.extents.y + 1), 
											distanceFromPlayer.z);
		
		Vector3 finalPosition = new Vector3 (_intDistFromPlayer.x, (_intDistFromPlayer.y), _intDistFromPlayer.z);
		
		transform.position = Vector3.Slerp (transform.position, finalPosition, smoothRange);
	}
	
	void OnMouseDown ()
	{		
		OnMousePressing = true;
		
		if (MinigameSetup.RunningTask && notificationType == Notifycation.Spoken)
			AudioSource.PlayClipAtPoint (MinigameSetup.GetAudioById (UserManager.CurrentTasksList.arrayList [UserManager.CurrentUser.id_Da_Ultima_Tarefa - 1].Model), Camera.main.transform.position);
	}
	
	void OnMouseUp ()
	{
		OnMousePressing = false;		
	}
	
	void OnGUI ()
	{
		if (Time.timeScale == 0 || notificationType == Notifycation.None)
			return;
			
		//if (lm.RunningTask) 
		{	
			if (notificationType == Notifycation.Written) {	
				this.ballonSprite.Draw ();
				GUI.color = Color.black;
				labelStyle = GUI.skin.label;
				labelStyle.font = uramaFont;		
				labelStyle.fontSize = this.fontSize;
				labelStyle.alignment = TextAnchor.MiddleCenter;
				
				textStimulusSprite.Draw ();
			} else if (notificationType == Notifycation.View) {
				this.ballonSprite.Draw ();
				imageStimulusSprite.Draw ();
			}
		}
	}
	
	
}
